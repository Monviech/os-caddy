<?php

namespace Pischem\Caddy\Api;

use OPNsense\Base\ApiMutableModelControllerBase;
use OPNsense\Core\Config;

class ReverseProxyController extends ApiMutableModelControllerBase
{
    protected static $internalModelName = 'caddy';
    protected static $internalModelClass = 'Pischem\Caddy\Caddy';

    private function connectionFilter()
    {
        $uuid = $this->request->get('uuid');
        $filter_func = null;
        if (!empty($uuid)) {
            $filter_func = function ($record) use ($uuid) {
                return $record->uuid == $uuid;
            };
        }
        return $filter_func;
    }

    private function wrapDefaults($payload, $topic)
    {
        $uuid = $this->request->get('uuid');
        if (!empty($uuid)) {
            foreach ($payload[$topic]['reverse'] as $key => &$value) {
                if ($key == $uuid) {
                    $value['selected'] = 1;
                } else {
                    $value['selected'] = 0;
                }
            }
        }
        return $payload;
    }

    public function searchReverseProxyAction()
    {
        return $this->searchBase(
            'reverseproxy.reverse',
            ['enabled', 'FromDomain', 'FromPort', 'ToDomain', 'ToPort', 'Description']
        );
    }

    public function setReverseProxyAction($uuid = null)
    {
        return $this->setBase('reverse', 'reverseproxy.reverse', $uuid);
    }

    public function addReverseProxyAction()
    {
        return $this->addBase('reverse', 'reverseproxy.reverse');
    }

    public function getReverseProxyAction($uuid = null)
    {
        $result = $this->getBase('reverse', 'reverseproxy.reverse', $uuid);
        if (!empty($result['reverse'])) {
            $result['reverse']['org_uuid'] = $uuid;
            if (empty($uuid)) {
                // Generate a new UUID only if we are not editing an existing entry
                $result['reverse']['uuid'] = $this->getModel()->reverseproxy->generateUUID();
            } else {
                $result['reverse']['uuid'] = $uuid;
            }
        }
        return $result;
    }

    public function toggleReverseProxyAction($uuid, $enabled = null)
    {
        return $this->toggleBase('reverseproxy.reverse', $uuid, $enabled);
    }

    public function delReverseProxyAction($uuid)
    {
        return $this->delBase('reverseproxy.reverse', $uuid);
    }
}

