<!-- HTML structure for the reverse proxy grid -->

<style>
    #reverseProxyGrid th:last-child, 
    #reverseProxyGrid td:last-child {
        text-align: right;
    }
</style>

<div style="background-color: white; padding: 10px; border: 1px solid #ddd;">
    <h1>Reverse Proxy</h1>
    <div style="display: block;"> <!-- Common container -->
        <table id="reverseProxyGrid" class="table table-condensed table-hover table-striped">
            <thead>
                <tr>
                    <th data-column-id="enabled">Enabled</th>
                    <th data-column-id="fromDomain">From Domain</th>
                    <th data-column-id="fromPort">From Port</th>
                    <th data-column-id="toDomain">To Domain</th>
                    <th data-column-id="toPort">To Port</th>
                    <th data-column-id="description">Description</th>
                    <th data-column-id="commands" style="text-align: right;">Commands</th>
                </tr>
            </thead>
            <tbody>
            <!-- Dynamically generated rows will be inserted here -->
            </tbody>
        </table>

        <div style="text-align: right; margin-top: 10px; margin-right: 55px;">
            <button id="addReverseProxyBtn" type="button" class="btn btn-xs btn-primary">
                <span class="fa fa-fw fa-plus"></span>
            </button>
        </div>
    </div>
</div>

<div style="margin-top: 20px; width: 100%; background-color: white; padding: 5px; border: 1px solid #ddd;">
    <button id="globalApplyButton" class="btn btn-primary" type="button" style="margin-left: 4px;">Apply</button>
</div>

<script type="text/javascript">
    document.addEventListener("DOMContentLoaded", function() {
        // Fetch reverse proxy entries on page load
        fetch('/api/caddy/ReverseProxy/get')
            .then(response => response.json())
            .then(data => {
                const reverseProxies = data.reverse;
                const tbody = document.querySelector('#reverseProxyGrid tbody');
                tbody.innerHTML = ''; // Clear existing rows

                // Iterate through the reverse proxy entries and create table rows
                Object.keys(reverseProxies).forEach(uuid => {
                    const entry = reverseProxies[uuid];
                    const row = tbody.insertRow();
                    const enabledCell = row.insertCell();
                    const enabledCheckbox = document.createElement('input');
                    enabledCheckbox.type = 'checkbox';
                    enabledCheckbox.checked = entry.Enabled === "1";
                    enabledCheckbox.classList.add('command-enable');
                    enabledCheckbox.dataset.rowId = uuid;
                    enabledCell.appendChild(enabledCheckbox);

                    row.insertCell().textContent = entry.FromDomain;
                    row.insertCell().textContent = entry.FromPort;
                    row.insertCell().textContent = entry.ToDomain;
                    row.insertCell().textContent = entry.ToPort;
                    const descriptionCell = row.insertCell();
                    descriptionCell.textContent = entry.Description;

                    const commandsCell = row.insertCell();
                    commandsCell.innerHTML = `
                        <button type="button" class="btn btn-xs btn-default btn-secondary command-edit" title="Edit" data-row-id="${uuid}">
                            <span class="fa fa-pencil"></span>
                        </button>
                        <button type="button" class="btn btn-xs btn-default btn-secondary command-clone" title="Clone" data-row-id="${uuid}">
                            <span class="fa fa-clone"></span>
                        </button>
                        <button type="button" class="btn btn-xs btn-danger command-delete" title="Delete" data-row-id="${uuid}">
                            <span class="fa fa-trash-o"></span>
                        </button>
                    `;

                    // Attach the event listeners to the buttons
                    commandsCell.querySelector('.command-edit').addEventListener('click', function(event) {
                        editEntry(event.currentTarget.dataset.rowId);
                    });
                    commandsCell.querySelector('.command-clone').addEventListener('click', function(event) {
                        cloneEntry(event.currentTarget.dataset.rowId);
                    });
                    commandsCell.querySelector('.command-delete').addEventListener('click', function(event) {
                        deleteEntry(event.currentTarget.dataset.rowId);
                    });
                });
            })
            .catch(error => console.error('Error loading reverse proxy entries:', error));

        // Function to edit an entry
        function editEntry(uuid) {
            // Redirect to the reverse proxy form with the UUID in the query string
            window.location.href = `/ui/caddy/reverse_proxy_form?uuid=${uuid}`;
        }

        // Function to clone an entry
        function cloneEntry(uuid) {
            console.log('Cloning entry', uuid);
    
            fetch('/api/caddy/ReverseProxy/get/' + uuid)
                .then(response => response.json())
                .then(data => {
                    const entry = data.reverse[uuid];
            
                    // Construct the query string with the entry data but without the UUID
                    const queryString = Object.keys(entry)
                        .filter(key => key !== 'UUID') // Exclude the UUID
                        .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(entry[key])}`)
                        .join('&');

                    // Redirect to the reverse proxy form with the cloned data in the query string
                    window.location.href = `/ui/caddy/reverse_proxy_form?${queryString}`;
                })
                .catch(error => console.error('Error cloning entry:', error));
        }

        // Function to delete an entry
        function deleteEntry(uuid) {
            console.log('Deleting entry', uuid);
            if (confirm('Are you sure you want to delete this entry?')) {
                $.ajax({
                    url: '/api/caddy/ReverseProxy/del/' + uuid, // Include UUID in the URL
                    method: 'POST',
                    contentType: 'application/json',
                    success: function(data) {
                        console.log('Delete response:', data);
                        // Handle the response
                    },
                    error: function(xhr, status, error) {
                        console.error('Error deleting entry:', error);
                        // Handle the error
                    }
                });
                // action to run after successful save, for example reconfigure service.
                location.reload();
            }
        }

        // Add event listener for the Add Reverse Proxy Button
        document.getElementById('addReverseProxyBtn').addEventListener('click', function() {
            window.location.href = '/ui/caddy/reverse_proxy_form';
        });
    });
</script>

